PROGRAM = icodec

BYTE_ENABLED = true
NATIVE_ENABLED = false

EXE = $(if $(BYTE_ENABLED), $(PROGRAM).run) \
          $(if $(NATIVE_ENABLED), $(PROGRAM).opt)

OCAMLCFLAGS += -g -thread

MENHIR_ENABLED = true
MENHIR_FLAGS += --infer -v --graph 
#MENHIR_FLAGS += --infer --trace -v --graph

USE_OCAMLFIND = true
OCAMLFINDFLAGS = 

OCAMLPACKS[] = core uint ppx_jane sexplib ppx_sexp_conv ppx_compare getopt

FILES =  syntaxerr getoptext utils parser lexer ast config typechecker main

OCamlGeneratedFiles(lexer.ml parser.ml parser.mli)

# Compile into an executable
OCamlProgram($(PROGRAM), $(FILES))

.PHONY: clean distclean run

# Default target: compile into bytecode or native code, or both
.DEFAULT: $(EXE)


# these are supposed to work in 32 and 64 bit modes
SCRIPTS[] = dft128-AVX_4x64f.g dft64-AVX_4x64f.g dft96-AVX_4x64f.g dft16-SSE_4x32f.g dft32-SSE_4x32f.g dft48-SSE_4x32f.g dft64-SSE_4x32f.g 
# additionally, these are supposed to work only in 32
SCRIPTS32[] = $(SCRIPTS) dft16.g dft48.g # dft16.g dft32.g dft48.g dft16avx.g dft64avx8.g 
# additionally, these are supposed to work only in 64
SCRIPTS64[] = $(SCRIPTS) dwmonitor.g  #dwmonitor_interval.g

run: $(EXE)
	./$(EXE) --64 -d $(addprefix ../samples/, $(SCRIPTS64))
	./$(EXE) --32 -d $(addprefix ../samples/, $(SCRIPTS32))

parser.dot.png:
	dot -Tpng -O parser.dot

clean:
  rm -f \
	lexer.ml \
	parser.ml parser.mli parser.automaton parser.conflicts \
	parser.dot parser.dot.png \
	*.omc \
    $(filter-proper-targets $(glob $(addsuffix .*, $(FILES)))) \
    $(PROGRAM).run $(PROGRAM).opt


